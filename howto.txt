- Criar um novo repo público no GitHub chamado counter-app e fazer o clone no Codespace para o ambiente local

### SIMPLE APP ###

- Entrar no diretório do repo criado e criar um dir novo:

	mkdir testing_counter

- Rodar o pip install com os requirements:

	python -m pip install -r requirements.txt

- Criar arquivo de exemplo de dados:

	mkdir data ; echo "0" > data/counter-file.txt ; chmod -R 777 data/

- Com o Dockerfile disponivel, fazer o build da imagem com Docker:

	docker build --tag "counter-app:0.1" .

- Testar execução local do app:

	python counter-app.py &

	curl -X GET http://127.0.0.1:8080
	curl -X POST http://127.0.0.1:8080

- Fazer o commit dos arquivos

- Criar nova branch no repo counter-app, denominada development

### AWS ENVIRONMENT ###

- Criar EC2 com Ubuntu (Host)

	Criar uma conta AWS free (https://aws.amazon.com/free/)

	Logar com o usuário e senha no console AWS (https://console.aws.amazon.com/console/home)

	Confirmar se a região AWS inicial está como Norte da Virginia (us-east-1) e escolher o serviço EC2. Se precisar ir para o console EC2 da região diretamente (https://us-east-1.console.aws.amazon.com/ec2/home?region=us-east-1#Home:)

	Clicar em Executar instância

	Na tela Launch an instance, definir as seguintes configurações:

		Nome: docker-host-cicd
		Imagem: Ubuntu Server 64 bits (x86) - Qualificado para o nível gratuito
		Tipo de instância: t2.micro
		Par de chaves: criar um novo par de chaves com o nome "cicd". Salvar o arquivo .pem de chave privada em sua máquina para usar posteriormente para login na instância EC2
		Rede: manter configuração default de VPC, atribuir IP publico automaticamente e Criar grupo de segurança. Selecionar as opções Permitir tráfego de SSH, HTTPS e HTTP da Internet
		Disco: manter o padrão (8GB gp3)

		Clicar no final da página em Executar instância

	Na próxima tela, após a mensagem de êxito na execução, clicar em Conectar-se à instância

	Selecione a opção que irá surgir na aba Conexão de instância do EC2 e clique no botão Conectar no fim da página, para carregar o console shell via web da Ec2

	Após login no sistema, instalar o Docker:

		apt-get update
		sudo apt-get install -y ca-certificates curl gnupg
		sudo install -m 0755 -d /etc/apt/keyrings
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
		echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu "$(cat /etc/os-release && echo "$VERSION_CODENAME")" stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
		sudo apt-get update && sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
		sudo docker run hello-world
		mkdir ~/docker
	
	Criar estrutura de dados do script no sistema local da EC2, para fins de teste:

		mkdir /tmp/data && echo 0 > /tmp/data/counter-file.txt && chmod -R 777 /tmp/data/
		

	Instalar AWS CLI (https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)
		
		sudo apt-get install -y unzip
		curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
		unzip awscliv2.zip && sudo ./aws/install
		aws --version

- Gerar Credenciais AWS
	
  Criar credenciais no IAM do usuário (https://us-east-1.console.aws.amazon.com/iam/home#/security_credentials)

	Clicar no botão Criar chave de acesso

	Copiar as chaves de acesso geradas

	Na instância, usar o comando aws configure para configurar as chaves criadas (region us-east-1)

	Gerar a conexão com o registry do ECR via docker login

		aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <aws acct id>.dkr.ecr.us-east-1.amazonaws.com
		aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 354918405503.dkr.ecr.us-east-1.amazonaws.com

- Criar repositório ECR

	Acessar no console AWS o serviço ECR na região us-east-1. Para acessar diretamente (https://us-east-1.console.aws.amazon.com/ecr/home?region=us-east-1)

	Clicar em Criar um repositório. Em nome do repositório, criar como counter-app (mesmo nome do GitHub repo)

- Criar secrets nos setting do repo para o ambiente de execução na AWS
	AWS_PEM - secret no qual o valor deve ser a chave privada armazenada no arquivo .pem durante a criação da instância EC2 na AWS
	AWS_HOST - secret com o IP publico criado na instância EC2
	AWS_USER - secret com o usuário local do S.O. Ubuntu instalado na EC2 (geralmente no Ubuntu o usuário se chama ubuntu)

### SNYK ###

- Configurar o Snyk (link no market place: https://github.com/snyk/actions/tree/master/python)

	Acessar https://snyk.io/pt-BR, clicar em Faça login e fazer login com a conta GitHub
´
	Na tela Authorize Snyk Login clicar no botão Authorize snyk para o Snyk acessar os repos do GitHub

	Após ser redirecionado para o wizard de opções de scanner, selecionar no passo 1 (Choose integration method) a opção GitHub e clicar em Next Step. No passo 2 (Set access permissions) selecionar Private and public repositories e clicar em Next Step. No passo 3 (Configure automation settings & authenticate) manter todas as opções marcadas e clicar em Authenticate GitHub

	De volta a tela de autorização, confirmar novamente no botão Authorize snyk

	Após ser redirecionado para a tela de importação de flow para fazer scan do primeiro projeto, selecionar o repo do GitHub e clicar no botão Import and scan. O projeto vai estar pronto para scan

	Ir para as configurações de usuário na conta (https://app.snyk.io/account) e no sub-menu Auth Token, clicar no campo da Key para exibição da mesma (na caixa de texto com o token oculto deverá estar aparecendo click to show) e copiar o valor para ser usado

- Criar secrets nos setting do repo para integrar o Snyk

	SNYK_TOKEN - secret com o token gerado na conta Snyk

### CI ###

- Ainda na branch development, verificar se o workflow .github/workflows/development-ci.yml está OK e realizar o commit para executar o Actions.

### CD ###

- Voltar para a branch main do repo. Realizar o PR (Pull Request) da branch development na branch main, para o merging do código.
- Agora na branch main, verificar se o workflow .github/workflows/production-cd.yml está OK e o docker compose está criado, realizar o commit para executar o Actions

### VALIDATING ###

- Executar um teste simples via POSTMAN ou CURL:
	curl -X GET http://<IP PUBLICO EC2>
	curl -X POST http://<IP PUBLICO EC2>

Caso queira validar um fluxo de autorização de deployment, ir nos settings do repo dentro da opção Environments, clicar no environment prod e habilitar a opção Required reviewers. Depois salvar em Save protection rules e executar novamente o workflow de deploy no Actions, agora será solicitado um review para aprovar ou recusar o deployment



